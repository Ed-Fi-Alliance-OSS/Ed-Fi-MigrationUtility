@startuml
title Decoupling to support Autofac

class Options {
    +string BaseMigrationScriptFolderPath
    +string BaseDescriptorXmlDirectoryPath
    +string DatabaseConnectionString
    +bool BypassExtensionValidationCheck
    +string RequestedFinalUpgradeVersion
    +string CurrentOdsVersionCommandLineOverride
    +string DescriptorNamespacePrefix
    +string CalendarConfigFilePath
    +string AzureStorageLocation
    +string CredentialNamespacePrefix
    +bool CompatibilityCheckOnly
    +int Timeout
}

note as N0
This is a rename of the MigrationConfigurationGlobal class.
Also the validation will be removed into a separate class.
The intent of this class is to be the command line arguments.
end note

Options . N0

interface IMigrationConfigurationProvider {
    +UpgradeVersionConfiguration Get(Options options,CurrentOdsApiVersion currentOdsApiVersion)
}

interface IApplicationRunner {
    +int Run(Options options)
}

interface IOptionsValidator {
    +bool IsValid(Options options)
}

interface ICurrentOdsApiVersionProvider {
    +CurrentOdsApiVersion Get(string databaseConnectionString)
}

class SqlServerCurrentOdsApiVersion implements ICurrentOdsApiVersionProvider {
    +CurrentOdsApiVersion Get(string databaseConnectionString)
}

class OptionsValidator implements IOptionsValidator {
    +bool IsValid(Options options)
}

interface IConnectionStringValidator {
    +bool IsValidConnectionString(string connectionString);
}

class SqlServerConnectionStringValidator implements IConnectionStringValidator {
    +bool IsValidConnectionString(string connectionString);
}

class MigrationConfigurationProvider implements IMigrationConfigurationProvider {
    +UpgradeVersionConfiguration Get(Options options, CurrentOdsApiVersion currentOdsApiVersion)
}

interface IOdsMigrationManagerFactory {
    +IOdsMigrationManager Create(Options options, UpgradeVersionConfiguration upgradeVersionConfiguration)
}

class OdsMigrationManagerFactory implements IOdsMigrationManagerFactory {
    +OdsMigrationManager Create(Options options, UpgradeVersionConfiguration upgradeVersionConfiguration)
}

class ApplicationRunner implements IApplicationRunner {
    +int Run(Options options)
}

interface IOdsMigrationManagerResolver {
    +List<OdsMigrationVersionRange> GetVersionRanges(EdFiOdsVersion fromVersion, EdFiOdsVersion toVersion)
    +Type GetConfigurationType(EdFiOdsVersion fromVersion, EdFiOdsVersion toVersion)
    +Type GetMigrationManagerType(EdFiOdsVersion fromVersion, EdFiOdsVersion toVersion)
    +List<EdFiOdsVersion> GetAllUpgradableVersions()
    +List<EdFiOdsVersion> GetSupportedUpgradeVersions(EdFiOdsVersion fromVersion)
    +EdFiOdsVersion GetLatestSupportedUpgradeVersion(EdFiOdsVersion fromVersion)
    +EdFiOdsVersion GetLatestSupportedUpgradeVersion()
    +bool VersionCanBeUpgraded(EdFiOdsVersion version)
}

class OdsMigrationManagerResolver implements IOdsMigrationManagerResolver{
    +List<OdsMigrationVersionRange> GetVersionRanges(EdFiOdsVersion fromVersion, EdFiOdsVersion toVersion)
    +Type GetConfigurationType(EdFiOdsVersion fromVersion, EdFiOdsVersion toVersion)
    +Type GetMigrationManagerType(EdFiOdsVersion fromVersion, EdFiOdsVersion toVersion)
    +List<EdFiOdsVersion> GetAllUpgradableVersions()
    +List<EdFiOdsVersion> GetSupportedUpgradeVersions(EdFiOdsVersion fromVersion)
    +EdFiOdsVersion GetLatestSupportedUpgradeVersion(EdFiOdsVersion fromVersion)
    +EdFiOdsVersion GetLatestSupportedUpgradeVersion()
    +bool VersionCanBeUpgraded(EdFiOdsVersion version)
}

note as N1
This class uses reflection to locate the right migration manager's type. At
this point of time we will not be changing this behavior, but this will allow
for future modifications. Note: The instance field inside of the class will be
removed, and this class should be registered as a singleton.
end note

interface IHelpTextProvider {
    +HelpText BuildHelpText<T>(ParserResult<T> parserResult, IEnumerable<Error> errors)
}

class HelpTextProvider implements IHelpTextProvider{
    +HelpText BuildHelpText<T>(ParserResult<T> parserResult, IEnumerable<Error> errors)
}

OdsMigrationManagerResolver .. N1

interface IConfigurationAutoMapper
{
    MigrationConfigurationVersionSpecific MapToVersionConfiguration(
        Options globalConfiguration, Type versionConfigurationType);

    Options MapToGlobalConfiguration<TConfiguration>(TConfiguration versionConfiguration)
        where TConfiguration : MigrationConfigurationVersionSpecific;
}

class ConfigurationAutoMapper implements IConfigurationAutoMapper
{
    MigrationConfigurationVersionSpecific MapToVersionConfiguration(
        Options globalConfiguration, Type versionConfigurationType);

    Options MapToGlobalConfiguration<TConfiguration>(TConfiguration versionConfiguration)
        where TConfiguration : MigrationConfigurationVersionSpecific;
}

note as N2
ConfigurationAutoMapper is not changing but will be registered as a singleton
into the container.
end note

ConfigurationAutoMapper .. N2

interface IUpgradeEngineBuilderProvider {
    +UpgradeEngineBuilder Get(string connectionString)
}

class SqlServerUpgradeEngineBuilderProvider implements IUpgradeEngineBuilderProvider {
    +UpgradeEngineBuilder Get(string connectionString)
}

OdsMigrationManagerFactory *-- IConfigurationAutoMapper
OdsMigrationManagerFactory *-- IOdsMigrationManagerResolver
OdsMigrationManagerFactory *-- IUpgradeEngineBuilderProvider

ApplicationRunner *-- IOptionsValidator
ApplicationRunner *-- ICurrentOdsApiVersionProvider
ApplicationRunner *-- IMigrationConfigurationProvider
ApplicationRunner *-- IConfigurationAutoMapper
ApplicationRunner *-- IOdsMigrationManagerFactory

MigrationConfigurationProvider *-- IOdsMigrationManagerResolver
MigrationConfigurationProvider *-- ICurrentOdsApiVersionProvider

OptionsValidator *-- IConnectionStringValidator

HelpTextProvider *-- IOdsMigrationManagerResolver
@enduml
